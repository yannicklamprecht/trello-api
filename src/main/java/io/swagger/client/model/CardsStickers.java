/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * CardsStickers
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-05-12T10:27:01.792+02:00[Europe/Berlin]")
public class CardsStickers {
  @SerializedName("image")
  private String image = null;

  @SerializedName("left")
  private String left = null;

  @SerializedName("rotate")
  private String rotate = null;

  @SerializedName("top")
  private String top = null;

  @SerializedName("zIndex")
  private String zIndex = null;

  public CardsStickers image(String image) {
    this.image = image;
    return this;
  }

   /**
   * a string with a length from 0 to 16384
   * @return image
  **/
  @Schema(description = "a string with a length from 0 to 16384")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public CardsStickers left(String left) {
    this.left = left;
    return this;
  }

   /**
   * undefined
   * @return left
  **/
  @Schema(description = "undefined")
  public String getLeft() {
    return left;
  }

  public void setLeft(String left) {
    this.left = left;
  }

  public CardsStickers rotate(String rotate) {
    this.rotate = rotate;
    return this;
  }

   /**
   * undefined
   * @return rotate
  **/
  @Schema(description = "undefined")
  public String getRotate() {
    return rotate;
  }

  public void setRotate(String rotate) {
    this.rotate = rotate;
  }

  public CardsStickers top(String top) {
    this.top = top;
    return this;
  }

   /**
   * undefined
   * @return top
  **/
  @Schema(description = "undefined")
  public String getTop() {
    return top;
  }

  public void setTop(String top) {
    this.top = top;
  }

  public CardsStickers zIndex(String zIndex) {
    this.zIndex = zIndex;
    return this;
  }

   /**
   * Valid Z values for stickers, must be an integer
   * @return zIndex
  **/
  @Schema(description = "Valid Z values for stickers, must be an integer")
  public String getZIndex() {
    return zIndex;
  }

  public void setZIndex(String zIndex) {
    this.zIndex = zIndex;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardsStickers cardsStickers = (CardsStickers) o;
    return Objects.equals(this.image, cardsStickers.image) &&
        Objects.equals(this.left, cardsStickers.left) &&
        Objects.equals(this.rotate, cardsStickers.rotate) &&
        Objects.equals(this.top, cardsStickers.top) &&
        Objects.equals(this.zIndex, cardsStickers.zIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, left, rotate, top, zIndex);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardsStickers {\n");
    
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    rotate: ").append(toIndentedString(rotate)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("    zIndex: ").append(toIndentedString(zIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
